---
layout: base.liquid
---


<input id="pagenav-toggle" type="checkbox"/>
<nav id="pagenav" tabindex="0">
    <ol>
        <li>
            <a href="overview">Overview</a>
        </li>
        <li>
            <a href="stories">Stories</a>
            <ol>
                <li>
                    <a href="{{ "../" | url }}">Introduction</a>
                </li>
                {% for story in collections.stories %}
                    <li>
                        <a href="{{ story.url | url }}">{{ story.data.title }}</a>
                    </li>
                    <ol>
                        {% for section in story.data.sections %}
                            <li>
                                <a href="{{ story.url | url }}#{{ section | slugify }}">{{ section }}</a>
                            </li>
                        {% endfor %}
                    </ol>
                {% endfor %}
            </ol>
        </li>

        <li>
            <a href="explore">Explore</a>
            <ol>
                <li>Overview</li>
                <li>
                    <a href="filter">Filter</a>
                    <table>
                        <tr>
                            <th>Features</th>
                            <th>People</th>
                        </tr>
                        <tr>
                            <td>
                                <legend>Border</legend>
                            </td>
                            <td>
                                <fieldset>
                                    <div class="checkbox column">
                                        <input id="border-i" type="checkbox" name="border" value="indigenous"/>
                                        <label for="border-i">Indigenous</label>
                                        <input id="border-e" type="checkbox" name="border" value="european"/>
                                        <label for="border-e">European</label>
                                    </div>
                                </fieldset>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <legend>Settlement</legend>
                            </td>
                            <td>
                                <fieldset>
                                    <div class="checkbox column">
                                        <input id="settlement-i" type="checkbox" name="border2" value="indigenous"/>
                                        <label for="settlement-i">Indigenous</label>
                                        <input id="settlement-e" type="checkbox" name="border2" value="european"/>
                                        <label for="settlement-e">European</label>
                                    </div>
                                </fieldset>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <legend>Land Route</legend>
                            </td>
                            <td>
                                <fieldset>
                                    <div class="checkbox column">
                                        <input id="land-i" type="checkbox" name="border2" value="indigenous"/>
                                        <label for="land-i">Indigenous</label>
                                        <input id="land-e" type="checkbox" name="border2" value="european"/>
                                        <label for="land-e">European</label>
                                    </div>
                                </fieldset>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <legend>Sea Route</legend>
                            </td>
                            <td>
                                <fieldset>
                                    <div class="checkbox column">
                                        <input id="sea-i" type="checkbox" name="border2" value="indigenous"/>
                                        <label for="sea-i">Indigenous</label>
                                        <input id="sea-e" type="checkbox" name="border2" value="european"/>
                                        <label for="sea-e">European</label>
                                    </div>
                                </fieldset>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <legend>River Route</legend>
                            </td>
                            <td>
                                <fieldset>
                                    <div class="checkbox column">
                                        <input id="river-i" type="checkbox" name="border2" value="indigenous"/>
                                        <label for="river-i">Indigenous</label>
                                        <input id="river-e" type="checkbox" name="border2" value="european"/>
                                        <label for="river-e">European</label>
                                    </div>
                                </fieldset>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <legend>All features</legend>
                            </td>
                            <td>
                                <fieldset>
                                    <div class="checkbox column">
                                        <input id="all-i" type="checkbox" name="border2" value="indigenous"/>
                                        <label for="all-i">Indigenous</label>
                                        <input id="all-e" type="checkbox" name="border2" value="european"/>
                                        <label for="all-e">European</label>
                                    </div>
                                </fieldset>
                            </td>
                        </tr>
                    </table>
                </li>
                <li>
          <a href="timeline">
          Timeline
          </a>
            
               
<input id="timeline-switch" type="checkbox" />    
    
  <div class="switch-wrapper"> 
      <label for="timeline-switch" class="toggle">
        <span>On</span>
        <span>Off</span>
      </label>
  </div>          
          
          
 <div id="timeline-maps">      
<ul>
  <li>
    <input type="checkbox" id="myCheckbox1" />
    <label for="myCheckbox1"><img src="https://i.ebayimg.com/images/g/ojsAAOSwNEVdXw0v/s-l1600.jpg" /></label>
  </li>
  <li>

    <input type="checkbox" id="myCheckbox2" />
    <label for="myCheckbox2"><img src="https://i5.walmartimages.com/asr/a38e5625-1031-479a-9b35-266e586ecd52_3.bbdfa3a052b52f8616bc011236bc4f31.jpeg" /></label>
  </li>
  <li>

    <input type="checkbox" id="myCheckbox3" />
    <label for="myCheckbox3"><img src="https://accessgenealogy.com/wp-content/uploads/2011/07/1755-Mitchell-Map-3-1080x763.jpg" /></label>
  </li>
</ul>
  </div>
    <label role="region" aria-label="pagenavigation" for="tline-toggle" id="tline-label">Timeline Switch</label>
        </li>
            </ol>

        </li>
    </ol>
</nav>

<input id="tline-toggle" type="checkbox">
<nav id="tlinenav" tabindex="0">
    <ul>
  <li>
    <input type="checkbox" id="myCheckbox1" />
    <label for="myCheckbox1"><img src="https://i.ebayimg.com/images/g/ojsAAOSwNEVdXw0v/s-l1600.jpg" /></label>
  </li>
  <li>

    <input type="checkbox" id="myCheckbox2" />
    <label for="myCheckbox2"><img src="https://i5.walmartimages.com/asr/a38e5625-1031-479a-9b35-266e586ecd52_3.bbdfa3a052b52f8616bc011236bc4f31.jpeg" /></label>
  </li>
  <li>

    <input type="checkbox" id="myCheckbox3" />
    <label for="myCheckbox3"><img src="https://accessgenealogy.com/wp-content/uploads/2011/07/1755-Mitchell-Map-3-1080x763.jpg" /></label>
  </li>
</ul>
</nav>
<main>
    <label role="region" aria-label="pagenavigation" for="pagenav-toggle" id="pagenav-label">Page Navigation</label>
    <div id="basemap" class="basemap"></div>
    <article tabindex="0">
        <h2>{{ title }}</h2>
        {{ content }}
    </article>

    <script type="text/javascript" src="{{ '/assets/node_modules/leaflet/dist/leaflet.js' | url }}"></script>
    <script type="text/javascript" src="{{ '/assets/js/leaflet/plugins/L.Control.Appearance.js' | url }}"></script>

    <script>

        class StoryMap {
            constructor(geojson_uri, story_id) {
                this.overlay = null;

                // Data parameters
                this.geojson_uri =
                    this.map = null;
                this.story_id = story_id;
                this.layerGroups = {};

                // Map parameters
                this.mapMinZoom = 1;
                this.mapMaxZoom = 11;

                // Styles for Features
                // fillColor: '#ff7800', fill: true
                this.highlightLineStyle = {
                    stroke: true,
                    color: '#0000ff',
                    weight: 5,
                    opacity: 0.6
                };

                // color: 'rgba(0,0,0,0)',
                this.defaultLineStyle = {
                    stroke: true,
                    color: '#0000ff',
                    weight: 5,

                    fill: false
                };


            }

            async loadShapeFile(shape_url) {
                let response = await fetch(shape_url);
                return await response.json();
            }



            /**
             * Load all shape files asynchronously
             */
            async loadShapes(shape_urls) {
                let shapePromises = [];
                let shapeGeoJSON = [];
                let storyFeatures = [];

                let shapeLayer = {};
                for (let u = 0; u < shape_urls.length; u++) {
                    shapePromises.push(this.loadShapeFile(shape_urls[u]));
                }
                await Promise.all(shapePromises).then((values) => {
                    for (let v = 0; v < values.length; v++) {
                        shapeGeoJSON.push(...values[v].features);
                    }
                });
                let unlinkedShapes = [];

                // Arrange into stories and default layer
                for (let s = 0; s < shapeGeoJSON.length; s++) {
                    let feature = shapeGeoJSON[s];
                    if (feature.properties) {
                        if (feature.properties.story_link === story_id) {
                            storyFeatures.push(feature);
                        }
                        if (feature.properties.frame_link) {
                        }

                        /*let frame_link = feature.properties.frame_link;
                                            if (shapesByFrameLink[frame_link]) {
                                                shapesByFrameLink[frame_link].push(feature);
                                            } else {
                                                shapesByFrameLink[frame_link] = [feature]
                                            }*/
                    }
                }

                return storyFeatures;
            }

            async initMap() {

                this.map = L.map('basemap');
                this.overlay = L.tileLayer('https://cawm.lib.uiowa.edu/tiles/{z}/{x}/{y}.png', {
                    minZoom: this.mapMinZoom,
                    maxZoom: this.mapMaxZoom,
                    opacity: 1
                }).addTo(this.map);
                // Initial view
                // This could be changed based on get string etc.
                this.map.setView([
                    {{ bounds[0].lat }}, {{ bounds[0].lng }}
                ], {{ bounds[0].zoom }});

                await this.loadFeatures();

            }



            onEachFeature(feature, layer) {
                // does this feature have a property named popupContent?
                if (feature.properties && (feature.properties.map_text || feature.properties.norm_text)) {
                    if (feature.properties.map_text) {
                        layer.bindPopup(feature.properties.map_text);
                    } else {
                        layer.bindPopup(feature.properties.norm_text);
                    }
                }
                this.addFeatureToGroups(feature);
            }

            /**
                Add a feature into several overlapping layer groups:
             https://leafletjs.com/examples/layers-control/
            Then we canadd/remove groups based on section and filter choices
            */
            addFeatureToGroups(feature){

            }

            async loadFeatures() {
                let storyFeatures = await this.loadShapes(geojson_uri);
                this.layerGroups.all = L.geoJSON(storyFeatures, {
                    style: this.defaultLineStyle,
                    onEachFeature: this.onEachFeature.bind(this)
                }).addTo(this.map);
            };


        }

        let geojson_uri = ["{{ '/assets/json/BCC_combined.json' | url }}"];
        let shapeLayers = null;
        let shapesByFrameLink = {};
        let story_id = {{ story_id }};

        storyMap = new StoryMap(geojson_uri, story_id);
        storyMap.initMap();

    </script>
</main>